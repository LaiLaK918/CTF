from Crypto.Util.number import long_to_bytes

# get from server

js = {"encrypted_flag": 9159581960003239984890449224073647662436229207820159267280677892147806822902621908106763857914757766291840426066958440857551758922427885902947240865871636485468762501101312754594219357756166526571629891654780281491285554918898174176255009219841714723023079154820501492759687427333025081560040011532206807522812579864067415191451633273793017425388991759399703549308932561947721507270271556401383780457709820734900113546530692719230741106703852757428059388187653509121860879503897206831193496066780092778211333139943996373888806888630541399089352647492852631789285683451796711342208383826908360066621372546345796627311, "modulus": 13401649245198993580300907282098972596109503523941057336773514961396753187538304817415602270769211736771444009594753634465243250969426138646250658691577670472507638935025087562744764455889334920918871834732867678401424345604469055324668760252569622132738465536759198889838775763226829395494340372561766540765049396680892379913791853628618060387312773102501871629284712935309478447941366575385871271789609696850727918791438283325693288797883600330120173962771120457913189138726187497403755053948355583890857002439615461079865553215681167021683699826521855469925561701485839298493320796493380519815002473707470903171581, "padding": [1572693097411087467321470183909085591088783537853872115647209132174560767047528471173187044218350002460119335809574507259970525440627586203022520073965320858034326285500652425854642172370393416850921705189028315733016584621756031077302287317103778480064459907904737895686240260457602605976090134860306180016423449057393851961468806238746519759332883876509759562823906199524788550013160514180118023807402286172507768536212713215500397193303533233103543276376782648663915344817982375004720745903378456427206965621132711033967434133691056177882738461345099423961200478071898209844929019584403048492304405336455882788635, 5332538688581460861006476274488595583981697307838392334481019046445011119589750340524904067809257894911159213301990566757497479203528288031356581990760236399444980179227494706028291602829838725004017686439440558689772390501009078124950968925486890039242222335304378548853112957446007478589816143166366154384751012888870507327248307222465433786566786277543574893571130775220403956158362093616375670367712888515059405568811481512022258274486136228109000139013720184048767567119802392345740952575916693777482888912008382455830239006088566977241290917971705339288099108025754481399322750627801460866230578849026930747093]}

js2 = {"encrypted_flag": 3522764389497143664219572372442133099921460207248608100346873886428270882535024675994332482687450400782529959619033577223164904896795879595275020169361272344348668284012980964391067697663622842593184224902158784431720045642696708530487459056222461500228602642935245515435383063113501233479934874889426655701362858680275331635674200932894637455735093789965494712966391191382752823495626998988737742649297832698686034276757089086458208430691940738786456878980666396147487379754340299917295780904672638133121781915178036266301054634130802580790540703486248798069249839433791271552626391662525638053705082642770492899620, "modulus": 13401649245198993580300907282098972596109503523941057336773514961396753187538304817415602270769211736771444009594753634465243250969426138646250658691577670472507638935025087562744764455889334920918871834732867678401424345604469055324668760252569622132738465536759198889838775763226829395494340372561766540765049396680892379913791853628618060387312773102501871629284712935309478447941366575385871271789609696850727918791438283325693288797883600330120173962771120457913189138726187497403755053948355583890857002439615461079865553215681167021683699826521855469925561701485839298493320796493380519815002473707470903171581, "padding": [10320489805310738021922750509588132068701501732705513471929361929728869167438935656215076019847450826035592787986883538103281927358124752051923002574380868979970912045738664845743382817754511521675151550369761571906653595589720465065691809782902734313269891962724817843045396953211798811359796064934222616799532213744285107214406750822376604282641388703680562269159687800085958108557466634018978825685085476566618806700680202998179151322406518318546057669900602473433687991678335106558743421253310586524263571288671929190393258987223749018502209049601443252395475868478867908876109250900901103753927793335747730890393, 7498541666137842289643161220643767777005207318551903151355432236009164581275098432659498803696439336109663406307467403424114775663678036470502762359655454718092872196780809198179972495039588351831837960154254853539442770825324008267990996840542565196720716841934743770576925120561977790118009915080320765732748637978007319155982767545120909525343558995395173957061127584924476465254338904509666388980959464016685474103062517187489334038370078610798007309705080569802405633150536261442342443815690261863422592049543339458967741555558647576203438370684701106037624867580950079961232189640439821163716150117611728653317]}

n1 = js["modulus"]
c1 = js["encrypted_flag"]
a1, b1 = js["padding"]

n2 = js2["modulus"]
c2 = js2["encrypted_flag"]
a2, b2 = js2["padding"]
e = 11
def compositeModulusGCD(a, b):
    if(b == 0):
            return a.monic()
    else:
            return compositeModulusGCD(b, a % b)

def FranklinReiter(n, e, c1, c2, a1, a2, b1, b2):
    P.<x> = PolynomialRing(Zmod(n))
    f = (a1*x+b1)^e - c1
    g = (a2*x+b2)^e - c2
    m =  Integer(n-(compositeModulusGCD(f,g)).coefficients()[0])
    return m
    
print(long_to_bytes(FranklinReiter(n1, e, c1, c2, a1, a2, b1, b2)))
