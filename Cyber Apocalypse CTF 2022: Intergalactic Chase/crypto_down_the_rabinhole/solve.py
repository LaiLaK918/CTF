from Crypto.Util.number import getPrime, isPrime, bytes_to_long, long_to_bytes, GCD
from Crypto.Util.Padding import pad

n1 = 59695566410375916085091065597867624599396247120105936423853186912270957035981683790353782357813780840261434564512137529316306287245132306537487688075992115491809442873176686026221661043777720872604111654524551850568278941757944240802222861051514726510684250078771979880364039814240006038057748087210740783689350438039317498789505078530402846140787188830971536805605748267334628057592989
c1 = 206131769237721955001530863959688756686125485413899261197125641745745636359058664398433013356663394210624150086689905532
c2 = 14350341133918883930676906390648724486852266960811870561648194176794020698141189777337348951219934072588842789694987397861496993878758159916334335632468891342228755755695273096621152247970509517996580512069034691932835017774636881861331636331496873041705094768329156701838193429109420730982051593645140188946
n2 = 56438641309774959123579452414864548345708278641778632906871133633348990457713200426806112132039095059800662176837023585166134224681069774331148738554157081531312104961252755406614635488382297434171375724135403083446853715913787796744272218693049072693460001363598351151832646947233969595478647666992523249343972394051106514947235445828889363124242280013397047951812688863313932909903047
c3 = 429546912004731012886527767254149694574730322956287028161761007271362927652041138366004560890773167255588200792979452452
c4 = 29903904396126887576044949247400308530425862142675118500848365445245957090320752747039056821346410855821626622960719507094119542088455732058232895757115241568569663893434035594991241152575495936972994239671806350060725033375704703416762794475486000391074743029264587481673930383986479738961452214727157980946

coeff = GCD(n1-4, n2-4)//9
def f(m: int, n: int, c1):
    return (m*(m+coeff))%n == c1

def solve(n, c1, c2, i):
    pow2 = pow(16, 2*i, n) 
    tmp1 = ((pow2**2)*c1) % n
    brute_pad = bytes_to_long(pad(b'', i)) 
    tmp2 = (c2 - brute_pad*(brute_pad+coeff))
    m = (tmp2-tmp1)*pow(-(pow2**2)*coeff+2*pow2*brute_pad+pow2*coeff, -1, n)
    m = m%n
    if f(m, n, c1):
        return m 
    return 0      
for i in range(1, 65):
    m1 = solve(n1, c1, c2, i)
    m2 = solve(n2, c3, c4, i)
    if m1:
        print(long_to_bytes(m1).decode())
    if m2:
        print(long_to_bytes(m2).decode())
